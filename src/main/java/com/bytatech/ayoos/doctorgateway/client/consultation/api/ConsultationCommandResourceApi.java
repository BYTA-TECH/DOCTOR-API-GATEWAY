/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytatech.ayoos.doctorgateway.client.consultation.api;

import com.bytatech.ayoos.doctorgateway.client.consultation.model.BasicCheckUp;
import com.bytatech.ayoos.doctorgateway.client.consultation.model.Consultation;
import com.bytatech.ayoos.doctorgateway.client.consultation.model.NextTaskResource;
import com.bytatech.ayoos.doctorgateway.client.consultation.model.Prescription;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-02-19T14:36:23.395+05:30[Asia/Calcutta]")

@Api(value = "ConsultationCommandResource", description = "the ConsultationCommandResource API")
public interface ConsultationCommandResourceApi {

    @ApiOperation(value = "basicCheckUpTask", nickname = "basicCheckUpTaskUsingPOST", notes = "", response = NextTaskResource.class, tags={ "consultation-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = NextTaskResource.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/basicCheckup/{processId}",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<NextTaskResource> basicCheckUpTaskUsingPOST(@ApiParam(value = "processId",required=true) @PathVariable("processId") String processId,@ApiParam(value = "basicCheckUp" ,required=true )  @Valid @RequestBody BasicCheckUp basicCheckUp);


    @ApiOperation(value = "consultPatient", nickname = "consultPatientUsingPOST", notes = "", response = Consultation.class, tags={ "consultation-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Consultation.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/consultPatient/{processId}",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Consultation> consultPatientUsingPOST(@ApiParam(value = "processId",required=true) @PathVariable("processId") String processId,@ApiParam(value = "prescription" ,required=true )  @Valid @RequestBody Prescription prescription);


    @ApiOperation(value = "initiateConsultation", nickname = "initiateConsultationUsingPOST", notes = "", response = NextTaskResource.class, tags={ "consultation-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = NextTaskResource.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/initiate",
        produces = "*/*", 
        method = RequestMethod.POST)
    ResponseEntity<NextTaskResource> initiateConsultationUsingPOST();


    @ApiOperation(value = "patientPrescription", nickname = "patientPrescriptionUsingPOST", notes = "", response = NextTaskResource.class, tags={ "consultation-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = NextTaskResource.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/savePatientPrescription/{processId}",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<NextTaskResource> patientPrescriptionUsingPOST(@ApiParam(value = "processId",required=true) @PathVariable("processId") String processId,@ApiParam(value = "prescription" ,required=true )  @Valid @RequestBody Prescription prescription);


    @ApiOperation(value = "requestPatientHistory", nickname = "requestPatientHistoryUsingPOST", notes = "", response = NextTaskResource.class, tags={ "consultation-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = NextTaskResource.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/requestPatientHistory/{processId}",
        produces = "*/*", 
        method = RequestMethod.POST)
    ResponseEntity<NextTaskResource> requestPatientHistoryUsingPOST(@ApiParam(value = "processId",required=true) @PathVariable("processId") String processId,@ApiParam(value = "choice") @Valid @RequestParam(value = "choice", required = false) String choice);


    @ApiOperation(value = "storeHistory", nickname = "storeHistoryUsingPOST", notes = "", response = NextTaskResource.class, tags={ "consultation-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = NextTaskResource.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/patient/storeHistory/{processId}",
        produces = "*/*", 
        method = RequestMethod.POST)
    ResponseEntity<NextTaskResource> storeHistoryUsingPOST(@ApiParam(value = "processId",required=true) @PathVariable("processId") String processId,@ApiParam(value = "choice") @Valid @RequestParam(value = "choice", required = false) String choice,@ApiParam(value = "otp") @Valid @RequestParam(value = "otp", required = false) String otp);

}
